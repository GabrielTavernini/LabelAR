using UnityEngine;
using UnityEngine.InputSystem;

public class ExampleClass : MonoBehaviour
{
    // This is was autogenerated and allows developers to create a dynamic
    // instance of an InputActionAsset which includes predefined action maps
    // that correspond to all of the Magic Leap 2's input.
    private MagicLeapInput _magicLeapInputs;
    
    // This class is an Action Map and was autogenerated by the Unity Input
    // System and includes predefined bindings for the Magic Leap 2 Controller
    // Input Events.
    private MagicLeapInput.ControllerActions _controllerActions;

    private bool triggerPressed = false;
    private float prevRotation = 0;

    void Start()
    {
        // Initialize the InputActionAsset
        _magicLeapInputs = new MagicLeapInput();
        _magicLeapInputs.Enable();

        //Initialize the ControllerActions using the Magic Leap Input
        _controllerActions = new MagicLeapInput.ControllerActions(_magicLeapInputs);

        //Subscribe to your choice of the controller events
        _controllerActions.Bumper.started += OnBumperClick;
        _controllerActions.Bumper.canceled += OnBumperRelease;
    }

    void Update()
    {
        if(triggerPressed && _controllerActions.IsTracked.IsPressed() && !MarkerUnderstanding.firstDetection) {
            float current = _controllerActions.PointerRotation.ReadValue<Quaternion>().eulerAngles.y;
            float angleDelta = Mathf.DeltaAngle(prevRotation, current) / 5;
            Debug.Log("Rotating:" + angleDelta);
            MarkerUnderstanding.aprilTag.transform.Rotate(new Vector3(0,angleDelta,0));
            prevRotation = current;
        }
    }

    private void OnBumperClick(InputAction.CallbackContext obj)
    {   
        prevRotation = _controllerActions.PointerRotation.ReadValue<Quaternion>().eulerAngles.y;
        triggerPressed = true;
    }

    private void OnBumperRelease(InputAction.CallbackContext obj)
    {   
        triggerPressed = false;
    }

    // Handles the disposing all of the input events.
    void OnDestroy()
    {
        _controllerActions.Trigger.started -= OnBumperClick;
        _controllerActions.Trigger.canceled -= OnBumperRelease;
        _magicLeapInputs.Dispose();
    }
}